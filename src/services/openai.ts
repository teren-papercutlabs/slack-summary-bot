import OpenAI from "openai";
import { Logger } from "../utils/logger";

export class OpenAIService {
  private static instance: OpenAIService;
  private client: OpenAI;

  private constructor() {
    // Detailed API key validation
    const apiKey = process.env.OPENAI_API_KEY;
    console.log("OpenAIService constructor - Validating API key");

    if (!apiKey) {
      Logger.error({
        message: "OPENAI_API_KEY environment variable is not set",
        envKeys: Object.keys(process.env).filter(
          (key) => !key.toLowerCase().includes("key")
        ),
        functionName: "OpenAIService.constructor",
        nodeEnv: process.env.NODE_ENV,
        cwd: process.cwd(),
      });
      throw new Error("OPENAI_API_KEY environment variable is not set");
    }

    // Validate API key format
    const trimmedKey = apiKey.trim();
    const keyValidation = {
      originalLength: apiKey.length,
      trimmedLength: trimmedKey.length,
      startsWithSk: trimmedKey.startsWith("sk-"),
      hasWhitespace: /\s/.test(apiKey),
      isExpectedLength: trimmedKey.length > 40, // OpenAI keys are typically longer than 40 chars
    };

    Logger.info({
      message: "OpenAI API key validation",
      validation: keyValidation,
      functionName: "OpenAIService.constructor",
    });

    if (!keyValidation.startsWithSk || !keyValidation.isExpectedLength) {
      Logger.error({
        message: "Invalid OpenAI API key format",
        validation: keyValidation,
        functionName: "OpenAIService.constructor",
      });
      throw new Error(
        "Invalid OpenAI API key format - must start with 'sk-' and be of sufficient length"
      );
    }

    this.client = new OpenAI({
      apiKey: trimmedKey,
    });

    // Test if client was initialized properly
    Logger.info({
      message: "OpenAI client initialized",
      clientExists: !!this.client,
      functionName: "OpenAIService.constructor",
    });
  }

  public static getInstance(): OpenAIService {
    if (!OpenAIService.instance) {
      OpenAIService.instance = new OpenAIService();
    }
    return OpenAIService.instance;
  }

  /**
   * Generates a structured summary of an article using GPT-4
   * @param content The article content to summarize
   * @returns A structured summary with overall summary and interesting points
   */
  public async generateSummary(content: string): Promise<{
    summary: string;
    interestingPoints: Array<{ point: string; sourceSection: string }>;
  }> {
    try {
      Logger.info({
        message: "Generating article summary",
        contentLength: content.length,
        functionName: "OpenAIService.generateSummary",
      });

      const prompt = `Please analyze this article and provide:
1. A concise overall summary (first paragraph)
2. Two most interesting or important points, each with a reference to the specific part of the article where it's mentioned (subsequent paragraphs)

Article content:
${content}

Format your response as follows:
[Overall Summary]

[Interesting Point 1] (Source: [relevant quote or section reference])

[Interesting Point 2] (Source: [relevant quote or section reference])`;

      const response = await this.client.chat.completions.create({
        model: "gpt-4o", // 4o is intended, do not fix this
        messages: [
          {
            role: "system",
            content:
              "You are a precise and insightful article summarizer. Focus on extracting the most important information and interesting points, always backing them up with specific references to the source material.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        temperature: 0.7,
        max_tokens: 1500,
      });

      const summaryText = response.choices[0]?.message?.content;
      if (!summaryText) {
        throw new Error("No summary generated by OpenAI");
      }

      // Parse the response into structured format
      const paragraphs = summaryText.split("\n\n").filter((p) => p.trim());
      const summary = paragraphs[0];
      const interestingPoints = paragraphs.slice(1).map((point) => {
        const match = point.match(/^(.*?)\s*\(Source:\s*(.*?)\)$/);
        return {
          point: match?.[1]?.trim() || point.trim(),
          sourceSection: match?.[2]?.trim() || "Section reference not found",
        };
      });

      Logger.info({
        message: "Successfully generated article summary",
        summaryLength: summary.length,
        pointsCount: interestingPoints.length,
        functionName: "OpenAIService.generateSummary",
      });

      return {
        summary,
        interestingPoints,
      };
    } catch (error) {
      Logger.error({
        message: "Failed to generate article summary",
        error: error instanceof Error ? error.message : "Unknown error",
        stack: error instanceof Error ? error.stack : undefined,
        functionName: "OpenAIService.generateSummary",
      });
      throw error;
    }
  }
}
